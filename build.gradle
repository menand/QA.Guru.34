plugins {
    id 'java-library'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'io.qameta.allure' version '2.12.0'
}

def allureVersion = "2.29.0"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencyUpdates {
    resolutionStrategy {
        componentSelection {
            all { ComponentSelection selection ->
                def unstableKeywords = ['alpha', 'beta', 'rc', 'm', 'snapshot']
                boolean isUnstable = unstableKeywords.any { keyword ->
                    selection.candidate.version.toLowerCase().contains(keyword)
                }
                if (isUnstable) {
                    selection.reject("Unstable version: ${selection.candidate.version}")
                }
            }
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(
            'io.qameta.allure:allure-selenide:'+allureVersion,
            'org.junit.jupiter:junit-jupiter-api:5.12.1',
            'org.junit.jupiter:junit-jupiter-params:5.12.1',
            'org.junit.platform:junit-platform-launcher:1.12.1',
            'org.slf4j:slf4j-simple:2.0.17',
            'org.apache.logging.log4j:log4j-to-slf4j:2.24.3',
            'com.codeborne:xls-test:1.4.3',
            'com.codeborne:pdf-test:1.5.0',
            'com.opencsv:opencsv:5.8',
            'com.fasterxml.jackson.core:jackson-databind:2.18.3')
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.12.1')
    implementation('com.codeborne:selenide:7.8.1',
            'net.datafaker:datafaker:2.4.3')
    /*testImplementation 'com.codeborne:xls-test:1.7.2'
    testImplementation 'com.codeborne:pdf-test:1.9.2'*/
}


tasks.withType(Test).configureEach {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

tasks.register('all_tests', Test) {
    useJUnitPlatform {

    }
}

tasks.register('lesson11', Test) {
    useJUnitPlatform {
        includeTags("lesson11")
    }
}